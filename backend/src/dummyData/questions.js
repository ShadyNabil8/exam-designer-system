mockQuestions = [
  {
    chapterId: "6713fa99d1793c041a3e678b",
    text: "What is an algorithm?",
    choices: [
      "A detailed step-by-step procedure to solve a problem",
      "A type of computer hardware",
      "A programming language",
    ],
    correctAnswer: "A detailed step-by-step procedure to solve a problem",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "Which of the following is a valid loop construct in C?",
    choices: ["do-while", "repeat-until", "for-each"],
    correctAnswer: "do-while",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the index of the first element in an array in C?",
    choices: ["0", "1", "-1"],
    correctAnswer: "0",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713fafed1793c041a3e67a4",
    text: "Which sorting algorithm has the worst-case time complexity of O(n^2)?",
    choices: ["Quick Sort", "Merge Sort", "Bubble Sort"],
    correctAnswer: "Bubble Sort",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is a dangling pointer?",
    choices: [
      "A pointer that points to a valid memory location",
      "A pointer that no longer points to a valid memory location",
      "A pointer that points to the first element in an array",
    ],
    correctAnswer: "A pointer that no longer points to a valid memory location",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb0fd1793c041a3e67ae",
    text: "What is the primary advantage of a hash table over a linked list?",
    choices: [
      "Hash tables provide constant-time average lookups",
      "Linked lists use less memory",
      "Hash tables are easier to implement",
    ],
    correctAnswer: "Hash tables provide constant-time average lookups",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb20d1793c041a3e67b3",
    text: "What is the purpose of the `fclose()` function in C?",
    choices: [
      "To close a file after reading or writing",
      "To delete a file",
      "To read the contents of a file",
    ],
    correctAnswer: "To close a file after reading or writing",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713fb27d1793c041a3e67b8",
    text: "What is the output of `print(type(42))` in Python?",
    choices: ["<class 'str'>", "<class 'int'>", "<class 'float'>"],
    correctAnswer: "<class 'int'>",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713fb30d1793c041a3e67bd",
    text: "Which of the following SQL commands is used to update existing data?",
    choices: ["INSERT", "UPDATE", "ALTER"],
    correctAnswer: "UPDATE",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713fb37d1793c041a3e67c2",
    text: "Which HTML tag is used to define an unordered list?",
    choices: ["<ol>", "<li>", "<ul>"],
    correctAnswer: "<ul>",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713fb4cd1793c041a3e67c9",
    text: "How do you retrieve form data in a Flask route handler?",
    choices: ["request.form", "request.data", "request.input"],
    correctAnswer: "request.form",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb55d1793c041a3e67ce",
    text: "Which HTTP method is used to request data from a specified resource?",
    choices: ["POST", "GET", "PUT"],
    correctAnswer: "GET",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "What is the primary function of an operating system?",
    choices: [
      "To provide a user interface for running applications",
      "To manage computer hardware and software resources",
      "To compile and run code",
    ],
    correctAnswer: "To manage computer hardware and software resources",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "Which of the following states is a process in when it is waiting for an event to occur?",
    choices: ["Running", "Waiting", "Terminated"],
    correctAnswer: "Waiting",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "What is the main advantage of using threads in a program?",
    choices: [
      "To simplify code",
      "To enable concurrent execution within a process",
      "To increase the speed of single-threaded applications",
    ],
    correctAnswer: "To enable concurrent execution within a process",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "Which of the following CPU scheduling algorithms is the most optimal for reducing the average waiting time?",
    choices: [
      "Round Robin",
      "First-Come, First-Served (FCFS)",
      "Shortest Job Next (SJN)",
    ],
    correctAnswer: "Shortest Job Next (SJN)",
    difficulty: "difficult",
    objective: "reminding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is a critical section in the context of process synchronization?",
    choices: [
      "A section of code where a process updates shared resources",
      "A section of code that cannot be executed",
      "A section of code that processes execute sequentially",
    ],
    correctAnswer: "A section of code where a process updates shared resources",
    difficulty: "difficult",
    objective: "reminding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which of the following is NOT a necessary condition for a deadlock to occur?",
    choices: ["Mutual Exclusion", "Circular Wait", "Preemption"],
    correctAnswer: "Preemption",
    difficulty: "difficult",
    objective: "reminding",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the main purpose of memory management in an operating system?",
    choices: [
      "To manage hardware and I/O devices",
      "To allocate and deallocate memory for processes",
      "To manage the CPU scheduling",
    ],
    correctAnswer: "To allocate and deallocate memory for processes",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d8560ec38eabf412ba4",
    text: "Which of the following is a key advantage of virtual memory?",
    choices: [
      "Faster disk access",
      "Ability to execute programs larger than physical memory",
      "Decreased CPU usage",
    ],
    correctAnswer: "Ability to execute programs larger than physical memory",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d8960ec38eabf412ba9",
    text: "What is the purpose of a file system in an operating system?",
    choices: [
      "To provide a way to store and retrieve files",
      "To schedule CPU tasks",
      "To manage system memory",
    ],
    correctAnswer: "To provide a way to store and retrieve files",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d8e60ec38eabf412bae",
    text: "What is the role of an I/O scheduler in an operating system?",
    choices: [
      "To manage system memory",
      "To optimize the use of I/O devices",
      "To schedule CPU tasks",
    ],
    correctAnswer: "To optimize the use of I/O devices",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d9760ec38eabf412bb4",
    text: "What is disk partitioning?",
    choices: [
      "Dividing a disk into separate sections for different file systems",
      "Formatting a disk for use with an operating system",
      "Backing up data from a disk",
    ],
    correctAnswer:
      "Dividing a disk into separate sections for different file systems",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d9d60ec38eabf412bb9",
    text: "What is the main purpose of an operating system's security mechanisms?",
    choices: [
      "To prevent unauthorized access to system resources",
      "To optimize CPU usage",
      "To manage system processes",
    ],
    correctAnswer: "To prevent unauthorized access to system resources",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153da360ec38eabf412bbe",
    text: "What is a distributed system?",
    choices: [
      "A single system that manages multiple users",
      "A system where resources are distributed across multiple machines",
      "A system that handles different processes concurrently",
    ],
    correctAnswer:
      "A system where resources are distributed across multiple machines",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153da960ec38eabf412bc3",
    text: "Which of the following is the key challenge in operating system design?",
    choices: [
      "Efficient use of system resources",
      "Simplifying the user interface",
      "Maximizing memory usage",
    ],
    correctAnswer: "Efficient use of system resources",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153daf60ec38eabf412bc8",
    text: "What is the primary function of the kernel in a Unix-based system?",
    choices: [
      "To manage system files",
      "To manage hardware and system processes",
      "To provide a user interface",
    ],
    correctAnswer: "To manage hardware and system processes",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "What is the primary role of an operating system?",
    choices: [
      "To manage hardware and software resources",
      "To execute user applications",
      "To provide security for the computer",
    ],
    correctAnswer: "To manage hardware and software resources",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "Which of the following is NOT a type of operating system?",
    choices: [
      "Real-Time Operating System (RTOS)",
      "Batch Operating System",
      "Parallel Operating System",
    ],
    correctAnswer: "Parallel Operating System",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "What does 'multitasking' mean in the context of operating systems?",
    choices: [
      "Running multiple applications at the same time",
      "Using multiple CPUs",
      "Running multiple operating systems simultaneously",
    ],
    correctAnswer: "Running multiple applications at the same time",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "Which component of the operating system interacts directly with hardware?",
    choices: ["Kernel", "Shell", "Application Software"],
    correctAnswer: "Kernel",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "Which of the following is an example of an operating system?",
    choices: ["Microsoft Excel", "Linux", "Google Chrome"],
    correctAnswer: "Linux",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "What is a 'time-sharing' operating system?",
    choices: [
      "An OS where multiple users share the system's resources simultaneously",
      "An OS that allocates memory in real time",
      "An OS designed for managing hardware",
    ],
    correctAnswer:
      "An OS where multiple users share the system's resources simultaneously",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "Which of the following is NOT a function of the operating system?",
    choices: ["Memory management", "Process management", "Compiling code"],
    correctAnswer: "Compiling code",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "What is the difference between a monolithic and a microkernel operating system architecture?",
    choices: [
      "Monolithic includes all OS services in the kernel, while microkernel separates them",
      "Monolithic uses more memory, while microkernel uses less",
      "Monolithic systems are faster than microkernel systems",
    ],
    correctAnswer:
      "Monolithic includes all OS services in the kernel, while microkernel separates them",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "Which of the following is a key goal of an operating system?",
    choices: [
      "Maximizing CPU utilization",
      "Minimizing user input",
      "Executing code faster",
    ],
    correctAnswer: "Maximizing CPU utilization",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d2e60ec38eabf412b7b",
    text: "What is the purpose of the user interface in an operating system?",
    choices: [
      "To manage processes and memory",
      "To enable communication between the user and the computer",
      "To load system services",
    ],
    correctAnswer: "To enable communication between the user and the computer",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "What is a process in the context of an operating system?",
    choices: ["A program in execution", "A system service", "A CPU scheduler"],
    correctAnswer: "A program in execution",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "Which of the following is NOT a possible state of a process?",
    choices: ["Waiting", "Blocked", "Allocated"],
    correctAnswer: "Allocated",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "What is the difference between a process and a thread?",
    choices: [
      "A process is an independent execution unit, while a thread is a lightweight unit within a process",
      "A thread is a larger unit than a process",
      "A thread has its own memory space, while a process does not",
    ],
    correctAnswer:
      "A process is an independent execution unit, while a thread is a lightweight unit within a process",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "What is context switching in process management?",
    choices: [
      "The act of switching the CPU from one process to another",
      "Allocating memory to processes",
      "Assigning priorities to processes",
    ],
    correctAnswer: "The act of switching the CPU from one process to another",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "Which of the following data structures is used by the OS to manage processes?",
    choices: [
      "Process Control Block (PCB)",
      "Thread Control Block (TCB)",
      "Memory Allocation Table (MAT)",
    ],
    correctAnswer: "Process Control Block (PCB)",
    difficulty: "difficult",
    objective: "reminding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "What is a process scheduler?",
    choices: [
      "A system that allocates CPU time to processes",
      "A program that compiles processes",
      "A system that monitors memory usage",
    ],
    correctAnswer: "A system that allocates CPU time to processes",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "Which of the following scheduling algorithms is designed to minimize the average waiting time?",
    choices: [
      "First-Come, First-Served (FCFS)",
      "Shortest Job First (SJF)",
      "Round Robin (RR)",
    ],
    correctAnswer: "Shortest Job First (SJF)",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "In a multi-programming environment, what is the primary goal of process management?",
    choices: [
      "Maximizing CPU utilization",
      "Minimizing power consumption",
      "Reducing memory usage",
    ],
    correctAnswer: "Maximizing CPU utilization",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "What is the role of the Process Control Block (PCB) in managing processes?",
    choices: [
      "It stores information about a process such as its state, program counter, and CPU registers",
      "It contains the executable code for the process",
      "It handles memory allocation for the process",
    ],
    correctAnswer:
      "It stores information about a process such as its state, program counter, and CPU registers",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d5860ec38eabf412b84",
    text: "What happens to a process when it transitions from the 'running' state to the 'waiting' state?",
    choices: [
      "It is waiting for an I/O event or resource",
      "It is waiting for the CPU to become available",
      "It has terminated execution",
    ],
    correctAnswer: "It is waiting for an I/O event or resource",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "What is a thread in the context of operating systems?",
    choices: [
      "A lightweight process that can run independently",
      "A type of hardware unit",
      "A program loaded in memory",
    ],
    correctAnswer: "A lightweight process that can run independently",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "Which of the following is an advantage of using threads?",
    choices: [
      "Faster context switching compared to processes",
      "Increased memory usage",
      "Reduced CPU utilization",
    ],
    correctAnswer: "Faster context switching compared to processes",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "What is the main difference between user-level threads and kernel-level threads?",
    choices: [
      "User-level threads are managed by the application, while kernel-level threads are managed by the OS",
      "User-level threads have higher priority than kernel-level threads",
      "Kernel-level threads are slower than user-level threads",
    ],
    correctAnswer:
      "User-level threads are managed by the application, while kernel-level threads are managed by the OS",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "In multithreading, what does 'concurrency' mean?",
    choices: [
      "Multiple threads making progress at the same time",
      "Multiple threads running at exactly the same time",
      "Multiple processes executing simultaneously",
    ],
    correctAnswer: "Multiple threads making progress at the same time",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "What is a race condition in the context of concurrency?",
    choices: [
      "A situation where multiple threads access shared data simultaneously, leading to unpredictable outcomes",
      "A state where threads are competing for CPU resources",
      "A condition where threads execute faster than processes",
    ],
    correctAnswer:
      "A situation where multiple threads access shared data simultaneously, leading to unpredictable outcomes",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "Which of the following is a common method for synchronizing threads?",
    choices: ["Mutex locks", "Polling", "Thread duplication"],
    correctAnswer: "Mutex locks",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "What is the purpose of a mutex in multithreaded programming?",
    choices: [
      "To prevent race conditions by ensuring that only one thread accesses a critical section at a time",
      "To switch between threads efficiently",
      "To allocate memory to threads dynamically",
    ],
    correctAnswer:
      "To prevent race conditions by ensuring that only one thread accesses a critical section at a time",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "What is deadlock in the context of concurrency?",
    choices: [
      "A situation where two or more threads are waiting for each other to release resources, causing them to be stuck",
      "A process where threads run continuously without stopping",
      "A method to improve CPU utilization",
    ],
    correctAnswer:
      "A situation where two or more threads are waiting for each other to release resources, causing them to be stuck",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "Which of the following techniques can help avoid deadlocks?",
    choices: [
      "Resource ordering",
      "Thread duplication",
      "Process prioritization",
    ],
    correctAnswer: "Resource ordering",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d6960ec38eabf412b8b",
    text: "In thread synchronization, what is the role of a condition variable?",
    choices: [
      "It allows a thread to wait for a certain condition to be true before continuing",
      "It allows a thread to lock a resource",
      "It ensures that threads run in a specific order",
    ],
    correctAnswer:
      "It allows a thread to wait for a certain condition to be true before continuing",
    difficulty: "difficult",
    objective: "understanding",
  },

  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "What is the primary goal of CPU scheduling?",
    choices: [
      "To maximize CPU utilization",
      "To reduce memory usage",
      "To minimize power consumption",
    ],
    correctAnswer: "To maximize CPU utilization",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "Which CPU scheduling algorithm selects the process with the smallest execution time?",
    choices: [
      "Shortest Job First (SJF)",
      "First-Come, First-Served (FCFS)",
      "Round Robin (RR)",
    ],
    correctAnswer: "Shortest Job First (SJF)",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "What is a disadvantage of the First-Come, First-Served (FCFS) scheduling algorithm?",
    choices: [
      "It can lead to the convoy effect, where shorter processes wait for long processes to finish",
      "It is complex to implement",
      "It requires frequent context switching",
    ],
    correctAnswer:
      "It can lead to the convoy effect, where shorter processes wait for long processes to finish",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "What is the main advantage of the Round Robin (RR) scheduling algorithm?",
    choices: [
      "It ensures fairness by allocating CPU time equally to all processes",
      "It minimizes the average waiting time",
      "It reduces memory fragmentation",
    ],
    correctAnswer:
      "It ensures fairness by allocating CPU time equally to all processes",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "Which of the following algorithms can cause starvation?",
    choices: [
      "Shortest Job First (SJF)",
      "First-Come, First-Served (FCFS)",
      "Round Robin (RR)",
    ],
    correctAnswer: "Shortest Job First (SJF)",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "What does 'preemptive' scheduling mean?",
    choices: [
      "The CPU can be taken away from a running process if a higher-priority process arrives",
      "Processes run until they voluntarily yield control",
      "Processes are assigned CPU time based on their execution length",
    ],
    correctAnswer:
      "The CPU can be taken away from a running process if a higher-priority process arrives",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "Which scheduling algorithm is most suitable for time-sharing systems?",
    choices: [
      "Round Robin (RR)",
      "Shortest Job First (SJF)",
      "Priority Scheduling",
    ],
    correctAnswer: "Round Robin (RR)",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "How is the priority of a process determined in Priority Scheduling?",
    choices: [
      "By the user or the system, based on the importance of the process",
      "By the process's memory usage",
      "By the time the process has been waiting in the queue",
    ],
    correctAnswer:
      "By the user or the system, based on the importance of the process",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "Which of the following is a benefit of using Multilevel Queue Scheduling?",
    choices: [
      "It allows different processes to be categorized based on their priority or type",
      "It minimizes waiting time for all processes",
      "It increases system throughput",
    ],
    correctAnswer:
      "It allows different processes to be categorized based on their priority or type",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d6e60ec38eabf412b90",
    text: "In the context of scheduling algorithms, what is 'turnaround time'?",
    choices: [
      "The total time taken from the submission of a process to its completion",
      "The time a process spends waiting in the ready queue",
      "The time it takes to switch from one process to another",
    ],
    correctAnswer:
      "The total time taken from the submission of a process to its completion",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is the primary goal of process synchronization?",
    choices: [
      "To coordinate processes that share data and prevent inconsistent results",
      "To maximize CPU utilization",
      "To manage memory allocation",
    ],
    correctAnswer:
      "To coordinate processes that share data and prevent inconsistent results",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is a critical section in process synchronization?",
    choices: [
      "A section of code where shared resources are accessed",
      "A part of memory allocated to a process",
      "A state where a process is blocked",
    ],
    correctAnswer: "A section of code where shared resources are accessed",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "Which problem occurs when multiple processes simultaneously access shared resources without proper synchronization?",
    choices: ["Race condition", "Deadlock", "Starvation"],
    correctAnswer: "Race condition",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "Which of the following is a technique to solve the critical section problem?",
    choices: ["Mutex locks", "Round Robin scheduling", "Virtual memory"],
    correctAnswer: "Mutex locks",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is the difference between a mutex and a semaphore?",
    choices: [
      "A mutex is a locking mechanism for a single process, while a semaphore allows multiple processes",
      "A semaphore locks resources, while a mutex switches threads",
      "A mutex allows multiple processes access at once, while a semaphore allows one",
    ],
    correctAnswer:
      "A mutex is a locking mechanism for a single process, while a semaphore allows multiple processes",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "Which of the following is a common problem in process synchronization?",
    choices: ["Deadlock", "Cache invalidation", "Fragmentation"],
    correctAnswer: "Deadlock",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "In the context of semaphores, what is the 'wait' operation?",
    choices: [
      "It decrements the semaphore and blocks if the value is less than 0",
      "It increments the semaphore value",
      "It checks if a process is in the critical section",
    ],
    correctAnswer:
      "It decrements the semaphore and blocks if the value is less than 0",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is Peterson's solution?",
    choices: [
      "A software-based solution to the critical section problem",
      "A hardware mechanism for cache management",
      "A scheduling algorithm for real-time systems",
    ],
    correctAnswer: "A software-based solution to the critical section problem",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "Which of the following is an example of busy waiting in synchronization?",
    choices: [
      "A process repeatedly checks if a resource is available instead of sleeping",
      "A process is blocked waiting for an I/O operation",
      "A process yields CPU time to another process",
    ],
    correctAnswer:
      "A process repeatedly checks if a resource is available instead of sleeping",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is a monitor in process synchronization?",
    choices: [
      "A high-level synchronization construct that allows safe access to shared resources",
      "A tool for measuring CPU performance",
      "A system for scheduling processes",
    ],
    correctAnswer:
      "A high-level synchronization construct that allows safe access to shared resources",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is starvation in the context of process synchronization?",
    choices: [
      "When a process never gets access to shared resources due to other higher-priority processes",
      "When a process runs out of memory",
      "When a process terminates unexpectedly",
    ],
    correctAnswer:
      "When a process never gets access to shared resources due to other higher-priority processes",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "Which of the following is used to prevent deadlocks in synchronization?",
    choices: [
      "Resource allocation graph",
      "Virtual memory",
      "Round-robin scheduling",
    ],
    correctAnswer: "Resource allocation graph",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is the primary function of a semaphore?",
    choices: [
      "To control access to a shared resource by multiple processes",
      "To prioritize processes based on CPU time",
      "To switch between threads in multithreading",
    ],
    correctAnswer:
      "To control access to a shared resource by multiple processes",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is a 'bounded buffer' problem in process synchronization?",
    choices: [
      "A classic synchronization problem involving shared memory and limited buffer space",
      "A situation where the system runs out of memory",
      "A process scheduling algorithm",
    ],
    correctAnswer:
      "A classic synchronization problem involving shared memory and limited buffer space",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is mutual exclusion?",
    choices: [
      "Ensuring that only one process at a time accesses critical sections",
      "Ensuring that all processes get equal access to CPU resources",
      "Making sure all processes have equal memory allocation",
    ],
    correctAnswer:
      "Ensuring that only one process at a time accesses critical sections",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is the purpose of a condition variable in monitors?",
    choices: [
      "It allows threads to wait for specific conditions to be met",
      "It enables memory allocation",
      "It allocates CPU time to processes",
    ],
    correctAnswer:
      "It allows threads to wait for specific conditions to be met",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What does a 'spinlock' do in process synchronization?",
    choices: [
      "It causes a thread to repeatedly check a condition until it can enter a critical section",
      "It blocks a process until resources are available",
      "It reallocates memory between processes",
    ],
    correctAnswer:
      "It causes a thread to repeatedly check a condition until it can enter a critical section",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is the 'Dining Philosophers' problem?",
    choices: [
      "A classic synchronization problem that illustrates resource sharing and deadlocks",
      "A memory management problem",
      "A method of process scheduling",
    ],
    correctAnswer:
      "A classic synchronization problem that illustrates resource sharing and deadlocks",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "Which synchronization technique ensures that threads or processes cooperate for data consistency?",
    choices: ["Condition variables", "Priority scheduling", "Paging"],
    correctAnswer: "Condition variables",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7360ec38eabf412b95",
    text: "What is the 'Readers-Writers' problem?",
    choices: [
      "A synchronization problem where readers can access shared resources concurrently, but writers need exclusive access",
      "A method to allocate memory",
      "A scheduling algorithm for prioritizing processes",
    ],
    correctAnswer:
      "A synchronization problem where readers can access shared resources concurrently, but writers need exclusive access",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is a deadlock in the context of operating systems?",
    choices: [
      "A situation where a set of processes are blocked because each process is holding a resource and waiting for another",
      "A process waiting for input/output operations",
      "A memory allocation failure",
    ],
    correctAnswer:
      "A situation where a set of processes are blocked because each process is holding a resource and waiting for another",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which of the following is a necessary condition for deadlock to occur?",
    choices: ["Mutual exclusion", "Context switching", "Paging"],
    correctAnswer: "Mutual exclusion",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which condition describes the 'Hold and Wait' in deadlock?",
    choices: [
      "A process is holding one resource and waiting for another",
      "A process holds all resources and is terminated",
      "A process only waits and doesn't hold any resources",
    ],
    correctAnswer: "A process is holding one resource and waiting for another",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is the 'Circular Wait' condition in deadlocks?",
    choices: [
      "A chain of processes each waiting for a resource held by the next process in the chain",
      "All processes wait for the same resource",
      "A process waits for its own resource",
    ],
    correctAnswer:
      "A chain of processes each waiting for a resource held by the next process in the chain",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which of the following is NOT a necessary condition for deadlock?",
    choices: ["Preemption", "Mutual exclusion", "Circular wait"],
    correctAnswer: "Preemption",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "How can deadlocks be prevented in a system?",
    choices: [
      "By ensuring that at least one of the necessary conditions for deadlock does not hold",
      "By increasing CPU scheduling",
      "By reducing memory fragmentation",
    ],
    correctAnswer:
      "By ensuring that at least one of the necessary conditions for deadlock does not hold",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is the Banker's algorithm used for?",
    choices: [
      "To avoid deadlocks by simulating resource allocation",
      "To schedule processes",
      "To manage memory allocation",
    ],
    correctAnswer: "To avoid deadlocks by simulating resource allocation",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which of the following is a method to handle deadlocks?",
    choices: ["Deadlock avoidance", "Memory paging", "Round robin scheduling"],
    correctAnswer: "Deadlock avoidance",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is the difference between deadlock prevention and deadlock avoidance?",
    choices: [
      "Prevention ensures deadlocks do not occur by negating one of the conditions, while avoidance dynamically analyzes resource allocation",
      "Prevention deals with memory, avoidance deals with processes",
      "There is no difference",
    ],
    correctAnswer:
      "Prevention ensures deadlocks do not occur by negating one of the conditions, while avoidance dynamically analyzes resource allocation",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which data structure is used in deadlock detection algorithms to track resource allocation?",
    choices: [
      "Resource allocation graph",
      "Binary search tree",
      "Priority queue",
    ],
    correctAnswer: "Resource allocation graph",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "In a system that uses deadlock detection, what must be done when a deadlock is detected?",
    choices: [
      "Terminate one or more processes to break the deadlock",
      "Restart the entire system",
      "Add more resources",
    ],
    correctAnswer: "Terminate one or more processes to break the deadlock",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is the primary drawback of deadlock detection and recovery?",
    choices: [
      "It can be expensive in terms of performance and may result in terminated processes",
      "It requires extra memory for every process",
      "It leads to increased CPU scheduling overhead",
    ],
    correctAnswer:
      "It can be expensive in terms of performance and may result in terminated processes",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which strategy is typically the most effective in systems where deadlocks are rare?",
    choices: [
      "Deadlock detection and recovery",
      "Deadlock prevention",
      "Deadlock avoidance",
    ],
    correctAnswer: "Deadlock detection and recovery",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is the key issue with the use of deadlock prevention techniques?",
    choices: [
      "They can limit system resource utilization by imposing constraints",
      "They result in longer context switching times",
      "They require special hardware",
    ],
    correctAnswer:
      "They can limit system resource utilization by imposing constraints",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What does the 'No Preemption' condition imply in the context of deadlocks?",
    choices: [
      "A process holding resources cannot have them forcibly taken away",
      "Processes are given equal priority",
      "Processes can release resources preemptively",
    ],
    correctAnswer:
      "A process holding resources cannot have them forcibly taken away",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What does the 'safe state' in deadlock avoidance signify?",
    choices: [
      "The system can allocate resources to processes in some order and avoid a deadlock",
      "All processes are waiting for resources",
      "The system is performing optimal memory management",
    ],
    correctAnswer:
      "The system can allocate resources to processes in some order and avoid a deadlock",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "In the context of deadlock prevention, how can the 'Circular Wait' condition be avoided?",
    choices: [
      "By assigning a total ordering of all resources and ensuring processes request resources in this order",
      "By preemptively terminating processes",
      "By increasing the number of resources",
    ],
    correctAnswer:
      "By assigning a total ordering of all resources and ensuring processes request resources in this order",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which of the following is an approach to ensure that a system remains deadlock-free?",
    choices: ["Banker's algorithm", "FIFO scheduling", "Memory paging"],
    correctAnswer: "Banker's algorithm",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "What is one of the major limitations of deadlock prevention techniques?",
    choices: [
      "They often restrict resource utilization or process concurrency",
      "They increase system throughput but lower reliability",
      "They cannot handle complex resource allocation",
    ],
    correctAnswer:
      "They often restrict resource utilization or process concurrency",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "67153d7a60ec38eabf412b9a",
    text: "Which of the following is true about resource allocation graphs in deadlock detection?",
    choices: [
      "A cycle in the graph indicates a potential deadlock",
      "All processes are in a ready state",
      "A directed edge points from a resource to a process only",
    ],
    correctAnswer: "A cycle in the graph indicates a potential deadlock",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the main purpose of memory management in an operating system?",
    choices: [
      "To allocate memory to programs efficiently and prevent memory conflicts",
      "To manage CPU scheduling",
      "To handle network connections",
    ],
    correctAnswer:
      "To allocate memory to programs efficiently and prevent memory conflicts",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the concept of 'paging' in memory management?",
    choices: [
      "Dividing the process into fixed-size pages and mapping them to physical memory",
      "Assigning an entire memory block to a process",
      "Allocating memory based on variable sizes",
    ],
    correctAnswer:
      "Dividing the process into fixed-size pages and mapping them to physical memory",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "In which memory management technique can fragmentation occur?",
    choices: ["Contiguous memory allocation", "Paging", "Demand paging"],
    correctAnswer: "Contiguous memory allocation",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the purpose of a memory management unit (MMU)?",
    choices: [
      "To translate logical addresses to physical addresses",
      "To control the CPU's access to the hard disk",
      "To manage the virtual memory swapping process",
    ],
    correctAnswer: "To translate logical addresses to physical addresses",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the difference between logical and physical addresses in memory management?",
    choices: [
      "Logical addresses are generated by the CPU, while physical addresses refer to actual memory locations",
      "Physical addresses are generated by the CPU, and logical addresses refer to actual memory locations",
      "Both are the same in modern memory systems",
    ],
    correctAnswer:
      "Logical addresses are generated by the CPU, while physical addresses refer to actual memory locations",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the main difference between paging and segmentation?",
    choices: [
      "Paging divides memory into fixed-size blocks, while segmentation divides memory into variable-size blocks based on logical divisions",
      "Paging is faster than segmentation",
      "Segmentation allows memory sharing while paging does not",
    ],
    correctAnswer:
      "Paging divides memory into fixed-size blocks, while segmentation divides memory into variable-size blocks based on logical divisions",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is 'virtual memory' in modern operating systems?",
    choices: [
      "An abstraction of main memory that allows programs to exceed the size of physical memory",
      "The memory allocated to video graphics cards",
      "Memory that is only used by kernel processes",
    ],
    correctAnswer:
      "An abstraction of main memory that allows programs to exceed the size of physical memory",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is a 'page fault' in virtual memory systems?",
    choices: [
      "A situation where the requested page is not in memory and must be fetched from disk",
      "An error that occurs when memory is over-allocated",
      "A situation where two processes access the same memory block",
    ],
    correctAnswer:
      "A situation where the requested page is not in memory and must be fetched from disk",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "Which of the following can lead to thrashing in a virtual memory system?",
    choices: [
      "Excessive paging due to insufficient physical memory",
      "Over-allocation of CPU time to a process",
      "A memory leak in a program",
    ],
    correctAnswer: "Excessive paging due to insufficient physical memory",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the 'working set' in memory management?",
    choices: [
      "The set of pages that a process is actively using",
      "The total number of processes running in the system",
      "The number of threads a process has",
    ],
    correctAnswer: "The set of pages that a process is actively using",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the purpose of the 'page replacement algorithm' in memory management?",
    choices: [
      "To determine which page to swap out when memory is full",
      "To allocate memory to a process",
      "To prevent memory fragmentation",
    ],
    correctAnswer: "To determine which page to swap out when memory is full",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "Which of the following is a commonly used page replacement algorithm?",
    choices: [
      "Least Recently Used (LRU)",
      "First-Come, First-Served (FCFS)",
      "Round Robin",
    ],
    correctAnswer: "Least Recently Used (LRU)",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "In which memory management scheme are external and internal fragmentation problems most likely to occur?",
    choices: ["Contiguous memory allocation", "Paging", "Segmentation"],
    correctAnswer: "Contiguous memory allocation",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is 'demand paging' in memory management?",
    choices: [
      "A system where pages are loaded into memory only when they are required",
      "A method of paging that allocates memory based on priority",
      "A strategy where the entire process is loaded into memory before execution",
    ],
    correctAnswer:
      "A system where pages are loaded into memory only when they are required",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the main advantage of using virtual memory?",
    choices: [
      "It allows processes to use more memory than physically available",
      "It makes paging algorithms faster",
      "It eliminates the need for physical memory",
    ],
    correctAnswer:
      "It allows processes to use more memory than physically available",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "What is the 'swap space' in virtual memory?",
    choices: [
      "A part of the hard disk used as an extension of physical memory",
      "The space where processes are scheduled for execution",
      "The area of memory reserved for kernel processes",
    ],
    correctAnswer:
      "A part of the hard disk used as an extension of physical memory",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "Which of the following memory management techniques allows sharing of code among processes?",
    choices: [
      "Segmentation with paging",
      "Pure segmentation",
      "First-fit allocation",
    ],
    correctAnswer: "Segmentation with paging",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "How does 'segmentation' differ from 'paging' in terms of memory allocation?",
    choices: [
      "Segmentation is based on logical divisions like code, stack, and heap, while paging divides memory into fixed-size blocks",
      "Paging is based on logical divisions, and segmentation divides memory into fixed-size blocks",
      "They are essentially the same in modern operating systems",
    ],
    correctAnswer:
      "Segmentation is based on logical divisions like code, stack, and heap, while paging divides memory into fixed-size blocks",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "67153d8060ec38eabf412b9f",
    text: "In a system using virtual memory, what happens when a program tries to access a page that is not currently in memory?",
    choices: [
      "A page fault occurs, and the page must be loaded from disk",
      "The system terminates the process",
      "The CPU fetches the page from the L1 cache",
    ],
    correctAnswer: "A page fault occurs, and the page must be loaded from disk",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the correct syntax to include a header file in C?",
    choices: [
      "#include <header.h>",
      "#include 'header.h'",
      "#include <header>",
    ],
    correctAnswer: "#include <header.h>",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "Which of the following is a valid variable declaration in C?",
    choices: ["int 1number;", "float number1;", "char &name;"],
    correctAnswer: "float number1;",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What does the 'printf' function do in C?",
    choices: [
      "It prints output to the console",
      "It reads input from the user",
      "It returns a value",
    ],
    correctAnswer: "It prints output to the console",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the purpose of the 'return' statement in a function?",
    choices: [
      "To terminate the program",
      "To exit the current function and optionally return a value to the caller",
      "To declare a variable",
    ],
    correctAnswer:
      "To exit the current function and optionally return a value to the caller",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is a pointer in C?",
    choices: [
      "A variable that stores the address of another variable",
      "A function that manipulates data",
      "A type of array",
    ],
    correctAnswer: "A variable that stores the address of another variable",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "How do you declare a function that takes two integers and returns an integer?",
    choices: [
      "int function(int a, int b);",
      "void function(int a, int b);",
      "int function(a, b);",
    ],
    correctAnswer: "int function(int a, int b);",
    difficulty: "difficult",
    objective: "reminding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "Which of the following correctly allocates memory for an array of 10 integers using dynamic memory allocation?",
    choices: [
      "int *arr = malloc(10 * sizeof(int));",
      "int arr[10] = malloc(10 * sizeof(int));",
      "int arr = new int[10];",
    ],
    correctAnswer: "int *arr = malloc(10 * sizeof(int));",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the output of the following code snippet? 'int x = 5; printf('%d', x++);'",
    choices: ["5", "6", "Error"],
    correctAnswer: "5",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What does the 'sizeof' operator do?",
    choices: [
      "Returns the size of a variable in bytes",
      "Counts the number of elements in an array",
      "Calculates the length of a string",
    ],
    correctAnswer: "Returns the size of a variable in bytes",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "Which of the following statements is true about arrays in C?",
    choices: [
      "Arrays can be resized during runtime",
      "The size of an array must be known at compile time",
      "Arrays can hold different data types",
    ],
    correctAnswer: "The size of an array must be known at compile time",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the output of the following code snippet? 'int a = 5; printf('%d', ++a);'",
    choices: ["5", "6", "Error"],
    correctAnswer: "6",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "How do you create a structure in C?",
    choices: [
      "struct name { type member; };",
      "struct name; { type member; }",
      "struct name(type member);",
    ],
    correctAnswer: "struct name { type member; };",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the purpose of the 'break' statement in C?",
    choices: [
      "To exit a loop or switch statement",
      "To terminate the program",
      "To skip an iteration in a loop",
    ],
    correctAnswer: "To exit a loop or switch statement",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "Which of the following is the correct way to declare a pointer to an integer?",
    choices: ["int *ptr;", "int ptr*;", "int &ptr;"],
    correctAnswer: "int *ptr;",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What does the 'free' function do in C?",
    choices: [
      "Releases allocated memory back to the system",
      "Allocates memory for a new variable",
      "Creates a new function",
    ],
    correctAnswer: "Releases allocated memory back to the system",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the result of the expression '10 / 4' in C?",
    choices: ["2", "2.5", "2.0"],
    correctAnswer: "2",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "Which control structure allows you to repeat a block of code as long as a condition is true?",
    choices: ["if statement", "for loop", "switch statement"],
    correctAnswer: "for loop",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "How do you read a string from user input in C?",
    choices: ["scanf('%s', str);", "gets(str);", "cin >> str;"],
    correctAnswer: "scanf('%s', str);",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "6713faedd1793c041a3e6798",
    text: "What is the purpose of the 'const' keyword in C?",
    choices: [
      "To declare a variable whose value cannot be changed",
      "To create a constant value for a function",
      "To indicate that a function will not modify the passed argument",
    ],
    correctAnswer: "To declare a variable whose value cannot be changed",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the index of the first element in an array in C?",
    choices: ["0", "1", "-1"],
    correctAnswer: "0",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "How do you declare an array of 10 integers in C?",
    choices: ["int arr[10];", "int arr(10);", "array int[10];"],
    correctAnswer: "int arr[10];",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "Which of the following will correctly initialize an array with values 1, 2, and 3?",
    choices: [
      "int arr[] = {1, 2, 3};",
      "int arr[3] = (1, 2, 3);",
      "int arr(1, 2, 3);",
    ],
    correctAnswer: "int arr[] = {1, 2, 3};",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "How do you access the third element of an array named 'arr'?",
    choices: ["arr[2]", "arr[3]", "arr(3)"],
    correctAnswer: "arr[2]",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the output of the following code snippet? 'int arr[] = {1, 2, 3}; printf('%d', arr[1]);'",
    choices: ["1", "2", "3"],
    correctAnswer: "2",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What happens if you try to access an index outside the bounds of an array?",
    choices: [
      "The program will crash",
      "It will return a random value",
      "It will create a new element",
    ],
    correctAnswer: "It will return a random value",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "How do you find the length of an array in C?",
    choices: ["sizeof(arr) / sizeof(arr[0])", "length(arr)", "sizeof(arr)"],
    correctAnswer: "sizeof(arr) / sizeof(arr[0])",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the correct way to copy the contents of one array to another?",
    choices: [
      "arr2 = arr1;",
      "memcpy(arr2, arr1, sizeof(arr1));",
      "copy(arr1, arr2);",
    ],
    correctAnswer: "memcpy(arr2, arr1, sizeof(arr1));",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "Which sorting algorithm can be used to sort an array in ascending order?",
    choices: ["Bubble Sort", "Insertion Sort", "All of the above"],
    correctAnswer: "All of the above",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "How would you declare a two-dimensional array in C?",
    choices: ["int arr[3][4];", "int arr(3)(4);", "int arr[3, 4];"],
    correctAnswer: "int arr[3][4];",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the output of the following code? 'int arr[] = {10, 20, 30}; printf('%d', arr[0] + arr[1]);'",
    choices: ["30", "40", "20"],
    correctAnswer: "30",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the main advantage of using arrays?",
    choices: [
      "Allows storing multiple values of the same type in a single variable",
      "Reduces memory usage",
      "Increases execution speed",
    ],
    correctAnswer:
      "Allows storing multiple values of the same type in a single variable",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the result of the following code snippet? 'int arr[5]; printf('%d', arr[4]);'",
    choices: ["0", "Undefined", "5"],
    correctAnswer: "Undefined",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "Which of the following methods can be used to reverse an array?",
    choices: [
      "Using a temporary array",
      "In-place swapping",
      "All of the above",
    ],
    correctAnswer: "All of the above",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "How can you declare and initialize an array in a single line?",
    choices: [
      "int arr[3] = {1, 2, 3};",
      "int arr = {1, 2, 3};",
      "int arr(1, 2, 3);",
    ],
    correctAnswer: "int arr[3] = {1, 2, 3};",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What is the effect of using a negative index in an array?",
    choices: [
      "It accesses the last element",
      "It causes an error",
      "It accesses a memory location before the array",
    ],
    correctAnswer: "It accesses a memory location before the array",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "How do you iterate through all elements of an array using a loop?",
    choices: [
      "for (int i = 0; i < sizeof(arr)/sizeof(arr[0]); i++)",
      "for (int i = 1; i <= length(arr); i++)",
      "for (int i = 0; i < arr.length; i++)",
    ],
    correctAnswer: "for (int i = 0; i < sizeof(arr)/sizeof(arr[0]); i++)",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713faf3d1793c041a3e679d",
    text: "What will happen if you declare an array with a size of zero?",
    choices: [
      "It will compile but can't be used",
      "It will cause a runtime error",
      "It is allowed and can be used for dynamic sizing",
    ],
    correctAnswer: "It will compile but can't be used",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is a pointer in C?",
    choices: [
      "A variable that stores the address of another variable",
      "A data type",
      "A function that points to a specific memory location",
    ],
    correctAnswer: "A variable that stores the address of another variable",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "How do you declare a pointer to an integer in C?",
    choices: ["int *ptr;", "int ptr;", "pointer int ptr;"],
    correctAnswer: "int *ptr;",
    difficulty: "simple",
    objective: "reminding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What does the 'malloc' function do?",
    choices: [
      "Allocates memory on the heap",
      "Frees memory",
      "Returns the size of a variable",
    ],
    correctAnswer: "Allocates memory on the heap",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What will happen if you do not free dynamically allocated memory?",
    choices: [
      "Memory leak",
      "Segmentation fault",
      "The memory is automatically freed",
    ],
    correctAnswer: "Memory leak",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "How do you access the value stored at the address a pointer is pointing to?",
    choices: [
      "Using the address operator",
      "Using the dereference operator",
      "Using the size operator",
    ],
    correctAnswer: "Using the dereference operator",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is the difference between 'malloc' and 'calloc'?",
    choices: [
      "calloc initializes memory to zero; malloc does not",
      "malloc is faster than calloc",
      "They are the same",
    ],
    correctAnswer: "calloc initializes memory to zero; malloc does not",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What does the 'free' function do?",
    choices: [
      "Frees up previously allocated memory",
      "Allocates new memory",
      "Releases stack memory",
    ],
    correctAnswer: "Frees up previously allocated memory",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "Which of the following will cause a segmentation fault?",
    choices: [
      "Accessing an uninitialized pointer",
      "Dereferencing a valid pointer",
      "Using the 'malloc' function correctly",
    ],
    correctAnswer: "Accessing an uninitialized pointer",
    difficulty: "difficult",
    objective: "creativity",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "How do you create a pointer to an array in C?",
    choices: ["int *arr;", "int arr*;", "int *arr[];"],
    correctAnswer: "int *arr;",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is the result of incrementing a pointer?",
    choices: [
      "It moves to the next memory address based on the type size",
      "It decreases the pointer value",
      "It has no effect on the pointer",
    ],
    correctAnswer: "It moves to the next memory address based on the type size",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is a null pointer?",
    choices: [
      "A pointer that points to no valid memory location",
      "A pointer that points to an integer with value zero",
      "A pointer that has been initialized",
    ],
    correctAnswer: "A pointer that points to no valid memory location",
    difficulty: "simple",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "Which statement is true about dynamic memory allocation?",
    choices: [
      "Memory must be allocated before usage",
      "It is automatically managed by the compiler",
      "It is faster than static memory allocation",
    ],
    correctAnswer: "Memory must be allocated before usage",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "How can you pass a pointer to a function in C?",
    choices: ["By value", "By reference", "Both by value and by reference"],
    correctAnswer: "Both by value and by reference",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is the output of the following code? 'int a = 10; int *p = &a; printf('%d', *p);'",
    choices: ["10", "0", "a"],
    correctAnswer: "10",
    difficulty: "simple",
    objective: "creativity",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What is pointer arithmetic?",
    choices: [
      "Performing operations on pointer variables",
      "Adding two pointers",
      "Creating multiple pointers",
    ],
    correctAnswer: "Performing operations on pointer variables",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "Which of the following can lead to a dangling pointer?",
    choices: [
      "Freeing a pointer without resetting it",
      "Initializing a pointer to NULL",
      "Using a local variable outside its scope",
    ],
    correctAnswer: "Freeing a pointer without resetting it",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "What does realloc do?",
    choices: [
      "Resizes the allocated memory block",
      "Frees memory",
      "Allocates memory on the stack",
    ],
    correctAnswer: "Resizes the allocated memory block",
    difficulty: "difficult",
    objective: "understanding",
  },
  {
    chapterId: "6713fb05d1793c041a3e67a9",
    text: "How can you determine the size of a dynamically allocated memory block?",
    choices: [
      "Using the sizeof operator",
      "It cannot be determined",
      "Using the length function",
    ],
    correctAnswer: "It cannot be determined",
    difficulty: "difficult",
    objective: "understanding",
  },
];

module.exports = mockQuestions;
